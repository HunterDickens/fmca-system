from flask import Blueprint, jsonify, request, send_from_directory, Response
from safer import CompanySnapshot
from utils import fill_pdf_annotations, add_notifications
from datetime import datetime
from models import User, FilingHistory
from extensions import db
import requests
import json
import jwt
import csv
import os
import io

filing = Blueprint("api", __name__, url_prefix="/api/filing")
client = CompanySnapshot()


@filing.route("/ping", methods=["GET"])
def ping():
    return jsonify({"message": "API is working!"})


@filing.route("/generate_pdf", methods=["POST"])
def generate_pdf():
    try:
        form_data = request.get_json()
        if not form_data:
            return jsonify({"message": "No Data"}), 400
        input_pdf_path = "template/MCS-150_Form.pdf"
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        output_pdf_path = f'generated/USDOT_{form_data.get("line16_19", {}).get("line16", "")}_{timestamp}.pdf'
        filing_name = (
            f'USDOT_{form_data.get("line16_19", {}).get("line16", "")}_{timestamp}.pdf'
        )
        result = fill_pdf_annotations(input_pdf_path, output_pdf_path, form_data)

        token = request.headers.get("Authorization")
        jwt_token = token.split(" ")[1]
        decoded = jwt.decode(
            jwt_token, os.getenv("JWT_SECRET_KEY"), algorithms=["HS256"]
        )
        if decoded:
            filing_history = FilingHistory()
            filing_history.usdotNumber = form_data.get("line16_19", {}).get(
                "line16", ""
            )
            filing_history.carrierEin = form_data.get("line16_19", {}).get("line19", "")
            filing_history.carrierEmail = form_data.get("line20", "")
            filing_history.carrierMileage = form_data.get("line21", "")
            filing_history.userId = decoded.get("sub", "")
            filing_history.filingPath = filing_name
            filing_history.status = 1
            db.session.add(filing_history)
            db.session.commit()

            add_notifications(
                {
                    "type": "document",
                    "title": "PDF Generation Complete",
                    "description": f"USDOT_{form_data.get('line16_19', {}).get('line16', '')}_{timestamp}.pdf has been generated by {decoded.get('firstName', '')}",
                    "read": False,
                    "link": "/admin/notifications",
                },
                decoded.get("sub", ""),
            )
        # trimmed_file_path = f"{filing_name.split('.pdf')[0]}_trimmed.pdf"
        if result == "Success":
            return (
                jsonify({"message": "Success", "filing_name": filing_name}),
                201,
            )
        return jsonify({"message": "Failed"}), 500
    except Exception as exception:
        return jsonify({"message": str(exception)}), 500


@filing.route("/get_by_usdot_number", methods=["GET"])
def get_by_usdot_number():
    try:
        usdot_number = request.args.get("usdot_number", type=int)
        if usdot_number is None:
            return {"error": "Missing 'usdot_number' parameter"}, 400
        url = f"https://data.transportation.gov/resource/az4n-8mr2.json"
        params = {"dot_number": usdot_number}
        response = requests.get(url, params=params)
        data_gov = response.json()

        try:
            safer_data_raw = client.get_by_usdot_number(usdot_number).to_json()
            safer_data = json.loads(safer_data_raw)
        except Exception as safer_exception:
            safer_data = None

        url = f"https://mobile.fmcsa.dot.gov/qc/services/carriers/{usdot_number}?webKey=70b23b9681392a109931da0d765962bd3e71eec6"
        response = requests.get(url)
        mobile_fmcsa = response.json()
        combined_data = {
            "data_gov": data_gov[0] if data_gov else None,
            "safer_data": safer_data,
            "mobile_fmcsa": mobile_fmcsa["content"]["carrier"],
        }
        if combined_data:
            return combined_data
        else:
            return jsonify({"message": "No data found"}), 404
    except Exception as exception:
        return jsonify({"message": str(exception)}), 500


@filing.route("/generated/<path:filename>")
def serve_generated_file(filename):
    if not filename.endswith(".pdf"):
        return "Forbidden", 403
    return send_from_directory("generated", filename)


@filing.route("/get_filing_history", methods=["GET"])
def get_filing_history():
    try:
        token = request.headers.get("Authorization")
        jwt_token = token.split(" ")[1]
        decoded = jwt.decode(
            jwt_token, os.getenv("JWT_SECRET_KEY"), algorithms=["HS256"]
        )
        filing_histories = FilingHistory.query.filter_by(userId=decoded.get("sub", ""))

        filing_history_list = [
            {
                "id": filing_history.id,
                "usdotNumber": filing_history.usdotNumber,
                "carrierEmail": filing_history.carrierEmail,
                "carrierMileage": filing_history.carrierMileage,
                "carrierEin": filing_history.carrierEin,
                "filingPath": filing_history.filingPath,
                "status": filing_history.status,
                "created_at": filing_history.created_at,
            }
            for filing_history in filing_histories
        ]

        return (
            jsonify({"message": "Success", "filing_histories": filing_history_list}),
            200,
        )
    except Exception as exception:
        return jsonify({"message": str(exception)}), 500


@filing.route("/get_filing_history_by_name", methods=["POST"])
def get_filing_history_by_name():
    try:
        data = request.get_json()
        token = request.headers.get("Authorization")
        jwt_token = token.split(" ")[1]
        decoded = jwt.decode(
            jwt_token, os.getenv("JWT_SECRET_KEY"), algorithms=["HS256"]
        )

        if decoded.get("isAdmin", "") == False:
            return jsonify({"message": "You’re not allowed to fetch data."}), 401

        user = User.query.filter(User.firstName.ilike(data.get("name", ""))).first()
        if not user:
            return jsonify({"message": "You’re not allowed to fetch data."}), 401

        filing_histories = FilingHistory.query.filter_by(userId=user.id).all()

        filing_history_list = [
            {
                "id": filing_history.id,
                "usdotNumber": filing_history.usdotNumber,
                "carrierEmail": filing_history.carrierEmail,
                "carrierMileage": filing_history.carrierMileage,
                "carrierEin": filing_history.carrierEin,
                "filingPath": filing_history.filingPath,
                "status": filing_history.status,
                "created_at": filing_history.created_at,
            }
            for filing_history in filing_histories
        ]

        return (
            jsonify({"message": "Success", "filing_histories": filing_history_list}),
            200,
        )
    except Exception as exception:
        return jsonify({"message": str(exception)}), 500


@filing.route("/get_pdf_statistics", methods=["GET"])
def get_pdf_statistics():
    try:
        filing_histories = FilingHistory.query.all()
        chartData = [
            {
                "id": filing_history.id,
                "day": filing_history.created_at.day,
                "month": filing_history.created_at.month,
                "year": filing_history.created_at.year,
                "timestamp": filing_history.created_at,
                "usdot": filing_history.usdotNumber,
                "user": filing_history.user.firstName,
            }
            for filing_history in filing_histories
        ]
        return (
            jsonify({"message": "Success", "chartData": chartData}),
            200,
        )
    except Exception as exception:
        return jsonify({"message": str(exception)}), 500


@filing.route("/export_history", methods=["GET"])
def export_history():
    try:
        token = request.headers.get("Authorization")
        jwt_token = token.split(" ")[1]
        decoded = jwt.decode(
            jwt_token, os.getenv("JWT_SECRET_KEY"), algorithms=["HS256"]
        )

        filing_histories = FilingHistory.query.filter_by(userId=decoded.get("sub", ""))

        output = io.StringIO()
        writer = csv.writer(output)

        writer.writerow(
            [
                "id",
                "USDOT Number",
                "Carrier Email",
                "Carrier Mileage",
                "EIN",
                "Filing Name",
                "Status",
                "Date Generated",
            ]
        )

        for fh in filing_histories:
            status_label = "Complete" if fh.status == 1 else "Failed"
            created_at_str = (
                fh.created_at.strftime("%Y-%m-%d %H:%M:%S") if fh.created_at else ""
            )
            writer.writerow(
                [
                    fh.id,
                    fh.usdotNumber,
                    fh.carrierEmail,
                    fh.carrierMileage,
                    fh.carrierEin,
                    fh.filingPath,
                    status_label,
                    created_at_str,
                ]
            )

        return Response(
            output.getvalue(),
            mimetype="text/csv",
            headers=[
                ("Content-Disposition", "attachment; filename=Filing-history.csv")
            ],
        )
    except Exception as exception:
        return jsonify({"message": str(exception)}), 500


@filing.route("/export_history_by_name", methods=["POST"])
def export_history_by_name():
    try:
        data = request.get_json()
        token = request.headers.get("Authorization")
        jwt_token = token.split(" ")[1]
        decoded = jwt.decode(
            jwt_token, os.getenv("JWT_SECRET_KEY"), algorithms=["HS256"]
        )

        if decoded.get("isAdmin", "") == False:
            return jsonify({"message": "You’re not allowed to fetch data."}), 401

        user = User.query.filter(User.firstName.ilike(data.get("name", ""))).first()
        if not user:
            return jsonify({"message": "You’re not allowed to fetch data."}), 401

        filing_histories = FilingHistory.query.filter_by(userId=user.id)

        output = io.StringIO()
        writer = csv.writer(output)

        writer.writerow(
            [
                "id",
                "USDOT Number",
                "Carrier Email",
                "Carrier Mileage",
                "EIN",
                "Filing Name",
                "Status",
                "Date Generated",
            ]
        )

        for fh in filing_histories:
            status_label = "Complete" if fh.status == 1 else "Failed"
            created_at_str = (
                fh.created_at.strftime("%Y-%m-%d %H:%M:%S") if fh.created_at else ""
            )
            writer.writerow(
                [
                    fh.id,
                    fh.usdotNumber,
                    fh.carrierEmail,
                    fh.carrierMileage,
                    fh.carrierEin,
                    fh.filingPath,
                    status_label,
                    created_at_str,
                ]
            )

        return Response(
            output.getvalue(),
            mimetype="text/csv",
            headers=[
                ("Content-Disposition", "attachment; filename=Filing-history.csv")
            ],
        )
    except Exception as exception:
        return jsonify({"message": str(exception)}), 500
